# -*- coding: utf-8 -*-
"""plot_pd_results.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11ZJhsuYjfkJ3topN-bRfIwRXmHfc9wc9
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from sklearn.metrics import mean_squared_error
title_font=36

def RMSE(data_act,data_pred,coordinate):
  return np.sqrt(mean_squared_error(data_act[coordinate], data_pred[coordinate]))

def find_max(ideal,data_act,data_pred,coordinate):
  return max(np.max(ideal),np.max((data_act[coordinate],data_pred[coordinate])))+max(np.max(ideal),np.max((data_act[coordinate],data_pred[coordinate])))*0.07

def loc_RMSE(ideal,data_act,data_pred,coordinate):
  loc_max = max(np.max(ideal),np.max((data_act[coordinate],data_pred[coordinate])))
  loc_min = min(np.min(ideal),np.min((data_act[coordinate],data_pred[coordinate])))
  return loc_min + abs(loc_min)*0.5, loc_max - abs(loc_max)*0.5

def plot_pred_real(ax,data_act,data_pred,coordinate,ideal_lenght,fig_char=None,label_on=False):
  #fig_char = {'x':'(a)', 'y':'(b)','z':'(c)'}
  ideal=np.arange(ideal_lenght)

  ax.plot(ideal,ideal,'r--',zorder=-1,label = "Ideal", linewidth=3)
  ax.scatter(data_act[coordinate],data_pred[coordinate],s=25,facecolor='#0000', edgecolor='#000000',linewidths=1.45*2,label = "Estimated")
  ax.grid(True)
  if label_on:
    ax.set_xlabel(f"{coordinate.upper()} Actual (mm)",fontsize = title_font)
    ax.set_ylabel(f"{coordinate.upper()} Estimated (mm)",fontsize = title_font)
    ax.set_title("".format(coordinate.upper(),np.round(np.corrcoef(data_act[coordinate],data_pred[coordinate])[0][1],2)))
  ax.text(loc_RMSE(ideal,data_act,data_pred,coordinate)[1], loc_RMSE(ideal,data_act,data_pred,coordinate)[0],
           "{} (mm) R={}\nRMSE: {} (mm)".format(coordinate.upper(),np.round(np.corrcoef(data_act[coordinate],data_pred[coordinate])[0][1],2),round(RMSE(data_act,data_pred,coordinate))) ,fontsize=title_font-5, style='italic', fontweight='bold')
  ax.text(0, find_max(ideal,data_act,data_pred,coordinate), fig_char ,fontsize=title_font, style='italic',)

  ax.legend(loc=0,fontsize=title_font)
  return ax

def calc_r(data_act,data_pred,coordinate):
  return np.corrcoef(data_act[coordinate],data_pred[coordinate])[0][1]


if __name__ == "__main__":
  plt.style.use('seaborn-white')
  plt.rcParams.update({'font.size':15})
  plt.rc('xtick', labelsize=36) 
  plt.rc('ytick', labelsize=36) 

  result_csv = "THREE_P2_prediction_per_actual.csv"
  #LR_Results = pd.read_csv(f"/content/Partial_Discharge/logs/linear_Regression/{result_csv}")
  XG_Results = pd.read_csv(f"../../logs/Xgboost/{result_csv}")
  SVR_Results = pd.read_csv(f"../../logs/SVR/{result_csv}")
  CNN_Results = pd.read_csv(f"../../logs/1D_final_case_study_Three_P2_y/prediction_per_actual.csv")
  NN_Results = pd.read_csv(f"../../logs/1D_final_case_study_snn_three_p2_y/prediction_per_actual.csv")

  # LR_pred = LR_Results[LR_Results['kind'] == 'predict']
  # LR_act = LR_Results[LR_Results['kind'] == 'actual']

  XG_pred = XG_Results[XG_Results['kind'] == 'predict']
  XG_act = XG_Results[XG_Results['kind'] == 'actual']

  SVR_pred = SVR_Results[SVR_Results['kind'] == 'predict']
  SVR_act = SVR_Results[SVR_Results['kind'] == 'actual']

  CNN_pred = CNN_Results[CNN_Results['kind'] == 'predict']
  CNN_act = CNN_Results[CNN_Results['kind'] == 'actual']

  NN_pred = NN_Results[NN_Results['kind'] == 'predict']
  NN_act = NN_Results[NN_Results['kind'] == 'actual']

  # ideal_x = np.arange(1000)
  # ideal_yz = np.arange(500)

  fig=plt.figure(figsize=(33,45))
  fig.supxlabel("Actual (mm)",y=0.06,fontsize = title_font+5)
  fig.supylabel("Estimated (mm)",x=0.06,fontsize = title_font+5)
  ax1 = fig.add_subplot(431)
  ax2 = fig.add_subplot(432)
  ax3 = fig.add_subplot(433)
  ax4 = fig.add_subplot(434)
  ax5 = fig.add_subplot(435)
  ax6 = fig.add_subplot(436)
  ax7 = fig.add_subplot(437)
  ax8 = fig.add_subplot(438)
  ax9 = fig.add_subplot(439)
  ax10 = fig.add_subplot(4,3,10)
  ax11 = fig.add_subplot(4,3,11)
  ax12 = fig.add_subplot(4,3,12)
  data_act = SVR_act
  data_pred = SVR_pred
  coordinate = 'x'
  ax1=plot_pred_real(ax1,data_act,data_pred,coordinate,1000, fig_char='(a)')


  coordinate = 'y'
  ax2=plot_pred_real(ax2,data_act,data_pred,coordinate,500, fig_char='(b)')
  ax2.text(250,530, "SVR" ,fontsize=title_font, horizontalalignment = 'center')


  coordinate = 'z'
  ax3=plot_pred_real(ax3,data_act,data_pred,coordinate,500, fig_char='(c)')

  data_act = XG_act
  data_pred = XG_pred

  coordinate = 'x'
  ax4=plot_pred_real(ax4,data_act,data_pred,coordinate,1000, fig_char='(d)')


  coordinate = 'y'
  ax5=plot_pred_real(ax5,data_act,data_pred,coordinate,500, fig_char='(e)')
  ax5.text(250,530, "XGBoost" ,fontsize=title_font, horizontalalignment = 'center')


  coordinate = 'z'
  ax6=plot_pred_real(ax6,data_act,data_pred,coordinate,500, fig_char='(f)')


  data_act = NN_act
  data_pred = NN_pred

  coordinate = 'x'
  ax7=plot_pred_real(ax7,data_act,data_pred,coordinate,1000, fig_char='(g)')

  coordinate = 'y'
  ax8=plot_pred_real(ax8,data_act,data_pred,coordinate,500, fig_char='(h)')
  ax8.text(250,560, "BPNN" ,fontsize=title_font, horizontalalignment = 'center')

  coordinate = 'z'
  ax9=plot_pred_real(ax9,data_act,data_pred,coordinate,500, fig_char='(i)')

  data_act = CNN_act
  data_pred = CNN_pred

  coordinate = 'x'
  ax10=plot_pred_real(ax10,data_act,data_pred,coordinate,1000, fig_char='(j)')

  coordinate = 'y'
  ax11=plot_pred_real(ax11,data_act,data_pred,coordinate,500, fig_char='(k)')
  ax11.text(250,530, "CNN" ,fontsize=title_font, horizontalalignment = 'center')

  coordinate = 'z'
  ax12,plot_pred_real(ax12,data_act,data_pred,coordinate,500, fig_char='(l)')
  #plt.subplot(4,3,1, frameon=False)
  # hide tick and tick label of the big axis
  #plt.text(0.1, 0.5, "Estimated (mm)",fontsize = title_font, va='center',rotation=90)

  # plt.subplots_adjust(top=4, bottom=0.08, left=0.10, right=0.95, hspace=0.25,
  #                      wspace=0.35)
  plt.savefig("R_on_CS3_P2_Y.png",bbox_inches='tight')